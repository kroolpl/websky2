---
import { ViewTransitions } from 'astro:transitions';
import favicon from '../assets/images/fav.png';
import '@fontsource/inter/400.css';
import '@fontsource/inter/500.css';
import '@fontsource/inter/600.css';
import '@fontsource/inter/700.css';

interface Props {
  title: string;
  description: string;
}

const { title, description } = Astro.props;


---

<!doctype html>
<html lang="pl">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/png" href={favicon.src} />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <ViewTransitions />
    
    <!-- SEO -->
    <meta name="description" content={description} />
    <meta name="robots" content="index, follow" />
    
    <!-- Open Graph -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    
    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    
    <!-- Add meta tags for better SEO -->
    <meta name="keywords" content="web design, UK, Polish, business websites, SEO" />
    <meta name="author" content="WebDesign UK" />
    <meta name="theme-color" content="#2563eb" />

    <!-- Add canonical URL -->
    <link rel="canonical" href={Astro.url} />

    <!-- Critical CSS -->
    <style is:inline>
      @import "/styles/critical.css";
    </style>

    <!-- Add structured data for SEO -->
    <script type="application/ld+json">
      {
        "@context": "https://schema.org",
        "@type": "WebSite",
        "name": {title},
        "description": {description},
        "url": {Astro.url}
      }
    </script>
    <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>
  </head>
  <body class="bg-gradient-to-br from-gray-50 to-blue-50/30">
    <div class="flex flex-col min-h-screen">
      <slot name="header" />
      <main 
        class="flex-grow" 
      >
        <slot />
      </main>
      <slot name="footer" />
    </div>
  </body>
</html>

<style is:global>
  /* Critical styles */
  :root {
    --accent: 136, 58, 234;
    --accent-light: 224, 204, 250;
    --accent-dark: 49, 10, 101;
    --accent-gradient: linear-gradient(
      45deg,
      rgb(var(--accent)),
      rgb(var(--accent-light)) 30%,
      white 60%
    );
  }
  
  html {
    scroll-behavior: smooth;
  }

  /* Smooth reveal animation for sections */
  .reveal {
    opacity: 0;
    transform: translateY(20px);
    transition: all 0.6s ease-out;
  }

  .reveal.active {
    opacity: 1;
    transform: translateY(0);
  }

  /* Gradient text effect */
  .gradient-text {
    background: linear-gradient(135deg, #2563eb 0%, #4f46e5 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  /* Glass effect */
  .glass {
    background: rgba(255, 255, 255, 0.7);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  /* Custom scrollbar */
  ::-webkit-scrollbar {
    width: 10px;
  }

  ::-webkit-scrollbar-track {
    background: #f1f1f1;
  }

  ::-webkit-scrollbar-thumb {
    background: #2563eb;
    border-radius: 5px;
  }

  ::-webkit-scrollbar-thumb:hover {
    background: #1d4ed8;
  }

  /* Smooth transitions */
  * {
    /* Remove this for better performance */
    /* transition: all 0.2s ease-in-out; */
  }

  /* Add specific transitions where needed */
  .transition-standard {
    transition: transform 0.2s ease-in-out, opacity 0.2s ease-in-out;
  }
</style>

<script>
  // Reveal animations on scroll
  function reveal() {
    const reveals = document.querySelectorAll('.reveal');
    
    reveals.forEach((element) => {
      const windowHeight = window.innerHeight;
      const elementTop = element.getBoundingClientRect().top;
      const elementVisible = 150;
      
      if (elementTop < windowHeight - elementVisible) {
        element.classList.add('active');
      }
    });
  }

  window.addEventListener('scroll', reveal);
  reveal(); // Initial check
</script>